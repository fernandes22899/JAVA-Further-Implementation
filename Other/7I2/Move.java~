/**
 * Move class for Aces Up.
 * 
 * Encapsulate the information for a Move.
 * This class represents the possible moves.
 *
 * @author rdb sna4
 */
public class Move
{    
    //------------------------ instance variables --------------------------
    ////////////////////////////////////////////////////
    // You need not use this variables. It is here so start code compiles.
    private Card card = null;
    //------------------------ Constructor --------------------------
    /**
     * This constructor is used for the call of an instance variable 
     * in Game.java to use the methods described by this class.
     */ 
    public Move()
    {
        //Empty constructor
    }
    //------------------------ Methods --------------------------
    /**
     * Method that takes a card from the hand and delivers it to a pile.
     * @param pile1 Pile
     * @param pile2 Pile
     */
    public void draw( Pile hand, Pile piles )
    {
        piles.getStack().push( hand.getStack().pop() );
    }
    /**
     * Method that takes a card from a Pile and discards it.
     * @param piles Pile
     * @param discard Pile
     */ 
    public void discard( Pile piles, Pile discards )
    {
        discards.getStack().push( piles.getStack().pop() );
    }
    /**
     * Method that moves a card in a pile with cards to an empty pile.
     * @param pile Pile
     * @param emptyPile Pile
     */ 
    public void moveToEmpty( Pile pile, Pile emptyPile )
    {
        emptyPile.getStack().push( pile.getStack().pop() );
    }
    /**
     * Method to determine if player won or lost.
     * It is defined by a pattern found only with Aces.
     * @param allPiles Pile[]
     * @param chosenPile Pile[]
     */
    public void overAllGameResult( Pile[] allPiles, Pile discardPile )
    {
        boolean part1 = false;
        for( int i = 0; i < 4; i++ )
        {
            for( int b = 0; b < 4; b++ )
            {
                if( allPiles[i].peek().compareTo( allPiles[b].peek() ) < 0 )
                {
                }
                else
                {
                    if( allPiles[i].peek().compareTo( allPiles[b].peek() ) == 0 )
                    {
                        continue;
                    }
                    else if( allPiles[i].peek().compareTo( allPiles[b].peek() ) == 0 )
                    {
                        part1 = true;   
                    }
                    if( part1 == true )
                    {
                        Reporter.report( " YOU WIN " );
                    }
                    
                    
                    
                    
                   // Reporter.report( " YOU LOSE \n Game Over" );
                }
                    
                }
            }
        }
    //-------------------- toString() ---------------------------------
    /**
     * Return string representation for a Pile; needs to be compact.
     * @return String 
     */
    public String toString()
    {
        if ( card != null )
            return card.toString(); 
        else
            return "Draw";
    }  
}
